// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Center Form Component renders component successfully 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EventForm
    bookCenterValue=""
    bookDateValue=""
    bookOnSubmit={[MockFunction]}
    center={Object {}}
    centerName=""
    dateDefaultValue=""
    dateValue=""
    errors={Object {}}
    event={Object {}}
    eventCenter=""
    eventTypeDefaultValue=""
    eventTypeValue=""
    onAfterChange={[MockFunction]}
    onChange={[MockFunction]}
    onFocus={[MockFunction]}
    sliderOnChange={[MockFunction]}
    submitOnClick={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <section
        className="form-dark"
      >
        <div
          className="text-uppercase card-title font-weight-bold blue-text "
        >
          Venue: 
          <h4>
            
          </h4>
        </div>
        <br />
        <br />
        <div>
          <div
            className="text-blue  z-depth-4"
          >
            <div
              className="input-field col s12"
            >
              <select
                className="form-control"
                defaultValue=""
                id="type"
                name="eventType"
                onChange={[MockFunction]}
                onFocus={[MockFunction]}
                value=""
              >
                <option
                  value=""
                >
                  Choose the type of event
                </option>
                <option
                  value="Wedding"
                >
                  Wedding
                </option>
                <option
                  value="Party"
                >
                  Party
                </option>
                <option
                  value="Conference"
                >
                  Conference
                </option>
                <option
                  value="Ceremony"
                >
                  Ceremony
                </option>
                <option
                  value="Other"
                >
                  Other
                </option>
              </select>
              <label
                className="active"
                htmlFor="event-type"
              >
                Type of event
                <br />
                <br />
              </label>
            </div>
            <br />
            <br />
            <div
              className="row"
            >
              <div
                className="input-field col s6 blue-text font-weight-bold"
              >
                <input
                  className="datepicker"
                  defaultValue=""
                  id="event-date"
                  name="date"
                  type="text"
                  value=""
                />
                <label
                  className="active"
                  htmlFor="event-center"
                >
                  Pick a date
                </label>
              </div>
            </div>
            <div>
              <p
                className="range-field"
              >
                <label
                  htmlFor="range"
                >
                  Approximate number of guests:
                </label>
              </p>
            </div>
            <p
              className="text-monospace font-weight-bold blue-text"
            >
              Approximately 
            </p>
            <ComponentWrapper
              defaultValue=""
              handleStyle={
                Array [
                  Object {},
                ]
              }
              onAfterChange={[MockFunction]}
              onChange={[MockFunction]}
              tipFormatter={[Function]}
              tipProps={Object {}}
            />
            <br />
            <br />
            <button
              className="waves-effect waves-light btn right hoverable indigo"
              onClick={[MockFunction]}
              type="submit"
            >
              <i
                aria-hidden="true"
                className="large material-icons right"
              >
                done
              </i>
              Update Event
            </button>
          </div>
        </div>
      </section>,
      "className": "card card-image",
      "style": Object {
        "backgroundImage": "url('http://i68.tinypic.com/dh5vk.jpg')",
        "height": "100%",
        "marginLeft": "-2.5%",
        "paddingLeft": "5%",
        "paddingRight": "35%",
        "paddingTop": "0px",
        "width": "120%",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="text-uppercase card-title font-weight-bold blue-text "
          >
            Venue: 
            <h4>
              
            </h4>
          </div>,
          <br />,
          <br />,
          <div>
            <div
              className="text-blue  z-depth-4"
            >
              <div
                className="input-field col s12"
              >
                <select
                  className="form-control"
                  defaultValue=""
                  id="type"
                  name="eventType"
                  onChange={[MockFunction]}
                  onFocus={[MockFunction]}
                  value=""
                >
                  <option
                    value=""
                  >
                    Choose the type of event
                  </option>
                  <option
                    value="Wedding"
                  >
                    Wedding
                  </option>
                  <option
                    value="Party"
                  >
                    Party
                  </option>
                  <option
                    value="Conference"
                  >
                    Conference
                  </option>
                  <option
                    value="Ceremony"
                  >
                    Ceremony
                  </option>
                  <option
                    value="Other"
                  >
                    Other
                  </option>
                </select>
                <label
                  className="active"
                  htmlFor="event-type"
                >
                  Type of event
                  <br />
                  <br />
                </label>
              </div>
              <br />
              <br />
              <div
                className="row"
              >
                <div
                  className="input-field col s6 blue-text font-weight-bold"
                >
                  <input
                    className="datepicker"
                    defaultValue=""
                    id="event-date"
                    name="date"
                    type="text"
                    value=""
                  />
                  <label
                    className="active"
                    htmlFor="event-center"
                  >
                    Pick a date
                  </label>
                </div>
              </div>
              <div>
                <p
                  className="range-field"
                >
                  <label
                    htmlFor="range"
                  >
                    Approximate number of guests:
                  </label>
                </p>
              </div>
              <p
                className="text-monospace font-weight-bold blue-text"
              >
                Approximately 
              </p>
              <ComponentWrapper
                defaultValue=""
                handleStyle={
                  Array [
                    Object {},
                  ]
                }
                onAfterChange={[MockFunction]}
                onChange={[MockFunction]}
                tipFormatter={[Function]}
                tipProps={Object {}}
              />
              <br />
              <br />
              <button
                className="waves-effect waves-light btn right hoverable indigo"
                onClick={[MockFunction]}
                type="submit"
              >
                <i
                  aria-hidden="true"
                  className="large material-icons right"
                >
                  done
                </i>
                Update Event
              </button>
            </div>
          </div>,
        ],
        "className": "form-dark",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Venue: ",
              <h4>
                
              </h4>,
            ],
            "className": "text-uppercase card-title font-weight-bold blue-text ",
          },
          "ref": null,
          "rendered": Array [
            "Venue: ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
              },
              "ref": null,
              "rendered": "",
              "type": "h4",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="text-blue  z-depth-4"
            >
              <div
                className="input-field col s12"
              >
                <select
                  className="form-control"
                  defaultValue=""
                  id="type"
                  name="eventType"
                  onChange={[MockFunction]}
                  onFocus={[MockFunction]}
                  value=""
                >
                  <option
                    value=""
                  >
                    Choose the type of event
                  </option>
                  <option
                    value="Wedding"
                  >
                    Wedding
                  </option>
                  <option
                    value="Party"
                  >
                    Party
                  </option>
                  <option
                    value="Conference"
                  >
                    Conference
                  </option>
                  <option
                    value="Ceremony"
                  >
                    Ceremony
                  </option>
                  <option
                    value="Other"
                  >
                    Other
                  </option>
                </select>
                <label
                  className="active"
                  htmlFor="event-type"
                >
                  Type of event
                  <br />
                  <br />
                </label>
              </div>
              <br />
              <br />
              <div
                className="row"
              >
                <div
                  className="input-field col s6 blue-text font-weight-bold"
                >
                  <input
                    className="datepicker"
                    defaultValue=""
                    id="event-date"
                    name="date"
                    type="text"
                    value=""
                  />
                  <label
                    className="active"
                    htmlFor="event-center"
                  >
                    Pick a date
                  </label>
                </div>
              </div>
              <div>
                <p
                  className="range-field"
                >
                  <label
                    htmlFor="range"
                  >
                    Approximate number of guests:
                  </label>
                </p>
              </div>
              <p
                className="text-monospace font-weight-bold blue-text"
              >
                Approximately 
              </p>
              <ComponentWrapper
                defaultValue=""
                handleStyle={
                  Array [
                    Object {},
                  ]
                }
                onAfterChange={[MockFunction]}
                onChange={[MockFunction]}
                tipFormatter={[Function]}
                tipProps={Object {}}
              />
              <br />
              <br />
              <button
                className="waves-effect waves-light btn right hoverable indigo"
                onClick={[MockFunction]}
                type="submit"
              >
                <i
                  aria-hidden="true"
                  className="large material-icons right"
                >
                  done
                </i>
                Update Event
              </button>
            </div>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="input-field col s12"
                >
                  <select
                    className="form-control"
                    defaultValue=""
                    id="type"
                    name="eventType"
                    onChange={[MockFunction]}
                    onFocus={[MockFunction]}
                    value=""
                  >
                    <option
                      value=""
                    >
                      Choose the type of event
                    </option>
                    <option
                      value="Wedding"
                    >
                      Wedding
                    </option>
                    <option
                      value="Party"
                    >
                      Party
                    </option>
                    <option
                      value="Conference"
                    >
                      Conference
                    </option>
                    <option
                      value="Ceremony"
                    >
                      Ceremony
                    </option>
                    <option
                      value="Other"
                    >
                      Other
                    </option>
                  </select>
                  <label
                    className="active"
                    htmlFor="event-type"
                  >
                    Type of event
                    <br />
                    <br />
                  </label>
                </div>,
                <br />,
                <br />,
                <div
                  className="row"
                >
                  <div
                    className="input-field col s6 blue-text font-weight-bold"
                  >
                    <input
                      className="datepicker"
                      defaultValue=""
                      id="event-date"
                      name="date"
                      type="text"
                      value=""
                    />
                    <label
                      className="active"
                      htmlFor="event-center"
                    >
                      Pick a date
                    </label>
                  </div>
                </div>,
                undefined,
                <div>
                  <p
                    className="range-field"
                  >
                    <label
                      htmlFor="range"
                    >
                      Approximate number of guests:
                    </label>
                  </p>
                </div>,
                <p
                  className="text-monospace font-weight-bold blue-text"
                >
                  Approximately 
                </p>,
                <ComponentWrapper
                  defaultValue=""
                  handleStyle={
                    Array [
                      Object {},
                    ]
                  }
                  onAfterChange={[MockFunction]}
                  onChange={[MockFunction]}
                  tipFormatter={[Function]}
                  tipProps={Object {}}
                />,
                undefined,
                <br />,
                <br />,
                <button
                  className="waves-effect waves-light btn right hoverable indigo"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  <i
                    aria-hidden="true"
                    className="large material-icons right"
                  >
                    done
                  </i>
                  Update Event
                </button>,
              ],
              "className": "text-blue  z-depth-4",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <select
                      className="form-control"
                      defaultValue=""
                      id="type"
                      name="eventType"
                      onChange={[MockFunction]}
                      onFocus={[MockFunction]}
                      value=""
                    >
                      <option
                        value=""
                      >
                        Choose the type of event
                      </option>
                      <option
                        value="Wedding"
                      >
                        Wedding
                      </option>
                      <option
                        value="Party"
                      >
                        Party
                      </option>
                      <option
                        value="Conference"
                      >
                        Conference
                      </option>
                      <option
                        value="Ceremony"
                      >
                        Ceremony
                      </option>
                      <option
                        value="Other"
                      >
                        Other
                      </option>
                    </select>,
                    <label
                      className="active"
                      htmlFor="event-type"
                    >
                      Type of event
                      <br />
                      <br />
                    </label>,
                    undefined,
                  ],
                  "className": "input-field col s12",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option
                          value=""
                        >
                          Choose the type of event
                        </option>,
                        <option
                          value="Wedding"
                        >
                          Wedding
                        </option>,
                        <option
                          value="Party"
                        >
                          Party
                        </option>,
                        <option
                          value="Conference"
                        >
                          Conference
                        </option>,
                        <option
                          value="Ceremony"
                        >
                          Ceremony
                        </option>,
                        <option
                          value="Other"
                        >
                          Other
                        </option>,
                      ],
                      "className": "form-control",
                      "defaultValue": "",
                      "id": "type",
                      "name": "eventType",
                      "onChange": [MockFunction],
                      "onFocus": [MockFunction],
                      "value": "",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Choose the type of event",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": "Choose the type of event",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Wedding",
                          "value": "Wedding",
                        },
                        "ref": null,
                        "rendered": "Wedding",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Party",
                          "value": "Party",
                        },
                        "ref": null,
                        "rendered": "Party",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Conference",
                          "value": "Conference",
                        },
                        "ref": null,
                        "rendered": "Conference",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Ceremony",
                          "value": "Ceremony",
                        },
                        "ref": null,
                        "rendered": "Ceremony",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Other",
                          "value": "Other",
                        },
                        "ref": null,
                        "rendered": "Other",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Type of event",
                        <br />,
                        <br />,
                      ],
                      "className": "active",
                      "htmlFor": "event-type",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Type of event",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {},
                        "ref": null,
                        "rendered": null,
                        "type": "br",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {},
                        "ref": null,
                        "rendered": null,
                        "type": "br",
                      },
                    ],
                    "type": "label",
                  },
                  undefined,
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="input-field col s6 blue-text font-weight-bold"
                  >
                    <input
                      className="datepicker"
                      defaultValue=""
                      id="event-date"
                      name="date"
                      type="text"
                      value=""
                    />
                    <label
                      className="active"
                      htmlFor="event-center"
                    >
                      Pick a date
                    </label>
                  </div>,
                  "className": "row",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <input
                        className="datepicker"
                        defaultValue=""
                        id="event-date"
                        name="date"
                        type="text"
                        value=""
                      />,
                      <label
                        className="active"
                        htmlFor="event-center"
                      >
                        Pick a date
                      </label>,
                    ],
                    "className": "input-field col s6 blue-text font-weight-bold",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "datepicker",
                        "defaultValue": "",
                        "id": "event-date",
                        "name": "date",
                        "onChange": undefined,
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Pick a date",
                        "className": "active",
                        "htmlFor": "event-center",
                      },
                      "ref": null,
                      "rendered": "Pick a date",
                      "type": "label",
                    },
                  ],
                  "type": "div",
                },
                "type": "div",
              },
              undefined,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <p
                    className="range-field"
                  >
                    <label
                      htmlFor="range"
                    >
                      Approximate number of guests:
                    </label>
                  </p>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <label
                      htmlFor="range"
                    >
                      Approximate number of guests:
                    </label>,
                    "className": "range-field",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Approximate number of guests:",
                      "htmlFor": "range",
                    },
                    "ref": null,
                    "rendered": "Approximate number of guests:",
                    "type": "label",
                  },
                  "type": "p",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Approximately ",
                    undefined,
                  ],
                  "className": "text-monospace font-weight-bold blue-text",
                },
                "ref": null,
                "rendered": Array [
                  "Approximately ",
                  undefined,
                ],
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultValue": "",
                  "handleStyle": Array [
                    Object {},
                  ],
                  "max": undefined,
                  "onAfterChange": [MockFunction],
                  "onChange": [MockFunction],
                  "step": undefined,
                  "tipFormatter": [Function],
                  "tipProps": Object {},
                  "value": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              undefined,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <i
                      aria-hidden="true"
                      className="large material-icons right"
                    >
                      done
                    </i>,
                    "Update Event",
                  ],
                  "className": "waves-effect waves-light btn right hoverable indigo",
                  "onClick": [MockFunction],
                  "type": "submit",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "aria-hidden": "true",
                      "children": "done",
                      "className": "large material-icons right",
                    },
                    "ref": null,
                    "rendered": "done",
                    "type": "i",
                  },
                  "Update Event",
                ],
                "type": "button",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "section",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <section
          className="form-dark"
        >
          <div
            className="text-uppercase card-title font-weight-bold blue-text "
          >
            Venue: 
            <h4>
              
            </h4>
          </div>
          <br />
          <br />
          <div>
            <div
              className="text-blue  z-depth-4"
            >
              <div
                className="input-field col s12"
              >
                <select
                  className="form-control"
                  defaultValue=""
                  id="type"
                  name="eventType"
                  onChange={[MockFunction]}
                  onFocus={[MockFunction]}
                  value=""
                >
                  <option
                    value=""
                  >
                    Choose the type of event
                  </option>
                  <option
                    value="Wedding"
                  >
                    Wedding
                  </option>
                  <option
                    value="Party"
                  >
                    Party
                  </option>
                  <option
                    value="Conference"
                  >
                    Conference
                  </option>
                  <option
                    value="Ceremony"
                  >
                    Ceremony
                  </option>
                  <option
                    value="Other"
                  >
                    Other
                  </option>
                </select>
                <label
                  className="active"
                  htmlFor="event-type"
                >
                  Type of event
                  <br />
                  <br />
                </label>
              </div>
              <br />
              <br />
              <div
                className="row"
              >
                <div
                  className="input-field col s6 blue-text font-weight-bold"
                >
                  <input
                    className="datepicker"
                    defaultValue=""
                    id="event-date"
                    name="date"
                    type="text"
                    value=""
                  />
                  <label
                    className="active"
                    htmlFor="event-center"
                  >
                    Pick a date
                  </label>
                </div>
              </div>
              <div>
                <p
                  className="range-field"
                >
                  <label
                    htmlFor="range"
                  >
                    Approximate number of guests:
                  </label>
                </p>
              </div>
              <p
                className="text-monospace font-weight-bold blue-text"
              >
                Approximately 
              </p>
              <ComponentWrapper
                defaultValue=""
                handleStyle={
                  Array [
                    Object {},
                  ]
                }
                onAfterChange={[MockFunction]}
                onChange={[MockFunction]}
                tipFormatter={[Function]}
                tipProps={Object {}}
              />
              <br />
              <br />
              <button
                className="waves-effect waves-light btn right hoverable indigo"
                onClick={[MockFunction]}
                type="submit"
              >
                <i
                  aria-hidden="true"
                  className="large material-icons right"
                >
                  done
                </i>
                Update Event
              </button>
            </div>
          </div>
        </section>,
        "className": "card card-image",
        "style": Object {
          "backgroundImage": "url('http://i68.tinypic.com/dh5vk.jpg')",
          "height": "100%",
          "marginLeft": "-2.5%",
          "paddingLeft": "5%",
          "paddingRight": "35%",
          "paddingTop": "0px",
          "width": "120%",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="text-uppercase card-title font-weight-bold blue-text "
            >
              Venue: 
              <h4>
                
              </h4>
            </div>,
            <br />,
            <br />,
            <div>
              <div
                className="text-blue  z-depth-4"
              >
                <div
                  className="input-field col s12"
                >
                  <select
                    className="form-control"
                    defaultValue=""
                    id="type"
                    name="eventType"
                    onChange={[MockFunction]}
                    onFocus={[MockFunction]}
                    value=""
                  >
                    <option
                      value=""
                    >
                      Choose the type of event
                    </option>
                    <option
                      value="Wedding"
                    >
                      Wedding
                    </option>
                    <option
                      value="Party"
                    >
                      Party
                    </option>
                    <option
                      value="Conference"
                    >
                      Conference
                    </option>
                    <option
                      value="Ceremony"
                    >
                      Ceremony
                    </option>
                    <option
                      value="Other"
                    >
                      Other
                    </option>
                  </select>
                  <label
                    className="active"
                    htmlFor="event-type"
                  >
                    Type of event
                    <br />
                    <br />
                  </label>
                </div>
                <br />
                <br />
                <div
                  className="row"
                >
                  <div
                    className="input-field col s6 blue-text font-weight-bold"
                  >
                    <input
                      className="datepicker"
                      defaultValue=""
                      id="event-date"
                      name="date"
                      type="text"
                      value=""
                    />
                    <label
                      className="active"
                      htmlFor="event-center"
                    >
                      Pick a date
                    </label>
                  </div>
                </div>
                <div>
                  <p
                    className="range-field"
                  >
                    <label
                      htmlFor="range"
                    >
                      Approximate number of guests:
                    </label>
                  </p>
                </div>
                <p
                  className="text-monospace font-weight-bold blue-text"
                >
                  Approximately 
                </p>
                <ComponentWrapper
                  defaultValue=""
                  handleStyle={
                    Array [
                      Object {},
                    ]
                  }
                  onAfterChange={[MockFunction]}
                  onChange={[MockFunction]}
                  tipFormatter={[Function]}
                  tipProps={Object {}}
                />
                <br />
                <br />
                <button
                  className="waves-effect waves-light btn right hoverable indigo"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  <i
                    aria-hidden="true"
                    className="large material-icons right"
                  >
                    done
                  </i>
                  Update Event
                </button>
              </div>
            </div>,
          ],
          "className": "form-dark",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Venue: ",
                <h4>
                  
                </h4>,
              ],
              "className": "text-uppercase card-title font-weight-bold blue-text ",
            },
            "ref": null,
            "rendered": Array [
              "Venue: ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                },
                "ref": null,
                "rendered": "",
                "type": "h4",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="text-blue  z-depth-4"
              >
                <div
                  className="input-field col s12"
                >
                  <select
                    className="form-control"
                    defaultValue=""
                    id="type"
                    name="eventType"
                    onChange={[MockFunction]}
                    onFocus={[MockFunction]}
                    value=""
                  >
                    <option
                      value=""
                    >
                      Choose the type of event
                    </option>
                    <option
                      value="Wedding"
                    >
                      Wedding
                    </option>
                    <option
                      value="Party"
                    >
                      Party
                    </option>
                    <option
                      value="Conference"
                    >
                      Conference
                    </option>
                    <option
                      value="Ceremony"
                    >
                      Ceremony
                    </option>
                    <option
                      value="Other"
                    >
                      Other
                    </option>
                  </select>
                  <label
                    className="active"
                    htmlFor="event-type"
                  >
                    Type of event
                    <br />
                    <br />
                  </label>
                </div>
                <br />
                <br />
                <div
                  className="row"
                >
                  <div
                    className="input-field col s6 blue-text font-weight-bold"
                  >
                    <input
                      className="datepicker"
                      defaultValue=""
                      id="event-date"
                      name="date"
                      type="text"
                      value=""
                    />
                    <label
                      className="active"
                      htmlFor="event-center"
                    >
                      Pick a date
                    </label>
                  </div>
                </div>
                <div>
                  <p
                    className="range-field"
                  >
                    <label
                      htmlFor="range"
                    >
                      Approximate number of guests:
                    </label>
                  </p>
                </div>
                <p
                  className="text-monospace font-weight-bold blue-text"
                >
                  Approximately 
                </p>
                <ComponentWrapper
                  defaultValue=""
                  handleStyle={
                    Array [
                      Object {},
                    ]
                  }
                  onAfterChange={[MockFunction]}
                  onChange={[MockFunction]}
                  tipFormatter={[Function]}
                  tipProps={Object {}}
                />
                <br />
                <br />
                <button
                  className="waves-effect waves-light btn right hoverable indigo"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  <i
                    aria-hidden="true"
                    className="large material-icons right"
                  >
                    done
                  </i>
                  Update Event
                </button>
              </div>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="input-field col s12"
                  >
                    <select
                      className="form-control"
                      defaultValue=""
                      id="type"
                      name="eventType"
                      onChange={[MockFunction]}
                      onFocus={[MockFunction]}
                      value=""
                    >
                      <option
                        value=""
                      >
                        Choose the type of event
                      </option>
                      <option
                        value="Wedding"
                      >
                        Wedding
                      </option>
                      <option
                        value="Party"
                      >
                        Party
                      </option>
                      <option
                        value="Conference"
                      >
                        Conference
                      </option>
                      <option
                        value="Ceremony"
                      >
                        Ceremony
                      </option>
                      <option
                        value="Other"
                      >
                        Other
                      </option>
                    </select>
                    <label
                      className="active"
                      htmlFor="event-type"
                    >
                      Type of event
                      <br />
                      <br />
                    </label>
                  </div>,
                  <br />,
                  <br />,
                  <div
                    className="row"
                  >
                    <div
                      className="input-field col s6 blue-text font-weight-bold"
                    >
                      <input
                        className="datepicker"
                        defaultValue=""
                        id="event-date"
                        name="date"
                        type="text"
                        value=""
                      />
                      <label
                        className="active"
                        htmlFor="event-center"
                      >
                        Pick a date
                      </label>
                    </div>
                  </div>,
                  undefined,
                  <div>
                    <p
                      className="range-field"
                    >
                      <label
                        htmlFor="range"
                      >
                        Approximate number of guests:
                      </label>
                    </p>
                  </div>,
                  <p
                    className="text-monospace font-weight-bold blue-text"
                  >
                    Approximately 
                  </p>,
                  <ComponentWrapper
                    defaultValue=""
                    handleStyle={
                      Array [
                        Object {},
                      ]
                    }
                    onAfterChange={[MockFunction]}
                    onChange={[MockFunction]}
                    tipFormatter={[Function]}
                    tipProps={Object {}}
                  />,
                  undefined,
                  <br />,
                  <br />,
                  <button
                    className="waves-effect waves-light btn right hoverable indigo"
                    onClick={[MockFunction]}
                    type="submit"
                  >
                    <i
                      aria-hidden="true"
                      className="large material-icons right"
                    >
                      done
                    </i>
                    Update Event
                  </button>,
                ],
                "className": "text-blue  z-depth-4",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <select
                        className="form-control"
                        defaultValue=""
                        id="type"
                        name="eventType"
                        onChange={[MockFunction]}
                        onFocus={[MockFunction]}
                        value=""
                      >
                        <option
                          value=""
                        >
                          Choose the type of event
                        </option>
                        <option
                          value="Wedding"
                        >
                          Wedding
                        </option>
                        <option
                          value="Party"
                        >
                          Party
                        </option>
                        <option
                          value="Conference"
                        >
                          Conference
                        </option>
                        <option
                          value="Ceremony"
                        >
                          Ceremony
                        </option>
                        <option
                          value="Other"
                        >
                          Other
                        </option>
                      </select>,
                      <label
                        className="active"
                        htmlFor="event-type"
                      >
                        Type of event
                        <br />
                        <br />
                      </label>,
                      undefined,
                    ],
                    "className": "input-field col s12",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <option
                            value=""
                          >
                            Choose the type of event
                          </option>,
                          <option
                            value="Wedding"
                          >
                            Wedding
                          </option>,
                          <option
                            value="Party"
                          >
                            Party
                          </option>,
                          <option
                            value="Conference"
                          >
                            Conference
                          </option>,
                          <option
                            value="Ceremony"
                          >
                            Ceremony
                          </option>,
                          <option
                            value="Other"
                          >
                            Other
                          </option>,
                        ],
                        "className": "form-control",
                        "defaultValue": "",
                        "id": "type",
                        "name": "eventType",
                        "onChange": [MockFunction],
                        "onFocus": [MockFunction],
                        "value": "",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Choose the type of event",
                            "value": "",
                          },
                          "ref": null,
                          "rendered": "Choose the type of event",
                          "type": "option",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Wedding",
                            "value": "Wedding",
                          },
                          "ref": null,
                          "rendered": "Wedding",
                          "type": "option",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Party",
                            "value": "Party",
                          },
                          "ref": null,
                          "rendered": "Party",
                          "type": "option",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Conference",
                            "value": "Conference",
                          },
                          "ref": null,
                          "rendered": "Conference",
                          "type": "option",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Ceremony",
                            "value": "Ceremony",
                          },
                          "ref": null,
                          "rendered": "Ceremony",
                          "type": "option",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Other",
                            "value": "Other",
                          },
                          "ref": null,
                          "rendered": "Other",
                          "type": "option",
                        },
                      ],
                      "type": "select",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          "Type of event",
                          <br />,
                          <br />,
                        ],
                        "className": "active",
                        "htmlFor": "event-type",
                      },
                      "ref": null,
                      "rendered": Array [
                        "Type of event",
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {},
                          "ref": null,
                          "rendered": null,
                          "type": "br",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {},
                          "ref": null,
                          "rendered": null,
                          "type": "br",
                        },
                      ],
                      "type": "label",
                    },
                    undefined,
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <div
                      className="input-field col s6 blue-text font-weight-bold"
                    >
                      <input
                        className="datepicker"
                        defaultValue=""
                        id="event-date"
                        name="date"
                        type="text"
                        value=""
                      />
                      <label
                        className="active"
                        htmlFor="event-center"
                      >
                        Pick a date
                      </label>
                    </div>,
                    "className": "row",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <input
                          className="datepicker"
                          defaultValue=""
                          id="event-date"
                          name="date"
                          type="text"
                          value=""
                        />,
                        <label
                          className="active"
                          htmlFor="event-center"
                        >
                          Pick a date
                        </label>,
                      ],
                      "className": "input-field col s6 blue-text font-weight-bold",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "datepicker",
                          "defaultValue": "",
                          "id": "event-date",
                          "name": "date",
                          "onChange": undefined,
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Pick a date",
                          "className": "active",
                          "htmlFor": "event-center",
                        },
                        "ref": null,
                        "rendered": "Pick a date",
                        "type": "label",
                      },
                    ],
                    "type": "div",
                  },
                  "type": "div",
                },
                undefined,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <p
                      className="range-field"
                    >
                      <label
                        htmlFor="range"
                      >
                        Approximate number of guests:
                      </label>
                    </p>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <label
                        htmlFor="range"
                      >
                        Approximate number of guests:
                      </label>,
                      "className": "range-field",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Approximate number of guests:",
                        "htmlFor": "range",
                      },
                      "ref": null,
                      "rendered": "Approximate number of guests:",
                      "type": "label",
                    },
                    "type": "p",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Approximately ",
                      undefined,
                    ],
                    "className": "text-monospace font-weight-bold blue-text",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Approximately ",
                    undefined,
                  ],
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultValue": "",
                    "handleStyle": Array [
                      Object {},
                    ],
                    "max": undefined,
                    "onAfterChange": [MockFunction],
                    "onChange": [MockFunction],
                    "step": undefined,
                    "tipFormatter": [Function],
                    "tipProps": Object {},
                    "value": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                undefined,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <i
                        aria-hidden="true"
                        className="large material-icons right"
                      >
                        done
                      </i>,
                      "Update Event",
                    ],
                    "className": "waves-effect waves-light btn right hoverable indigo",
                    "onClick": [MockFunction],
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "aria-hidden": "true",
                        "children": "done",
                        "className": "large material-icons right",
                      },
                      "ref": null,
                      "rendered": "done",
                      "type": "i",
                    },
                    "Update Event",
                  ],
                  "type": "button",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
        ],
        "type": "section",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
