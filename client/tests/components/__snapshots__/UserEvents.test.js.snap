// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`user history Component component successfully rendered 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserEvents
    allUserEvents={
      Object {
        "events": Array [
          Object {
            "event1": Object {
              "Center": Object {
                "address": "23, Iyanla Street",
                "city": "Ikate",
                "image": "",
                "name": "The Sugar Mama",
              },
              "centerId": 3,
              "createdAt": "2018-05-24T16:16:11.648Z",
              "date": "2018-06-04",
              "eventType": "Party",
              "guestNo": 60,
              "id": 3,
              "isCancelled": null,
              "updatedAt": "2018-05-24T16:16:11.648Z",
              "userId": 4,
            },
            "event2": Object {
              "Center": Object {
                "address": "23, Segun Samuel Street",
                "city": "Denrele",
                "image": "",
                "name": "The Hot Abode",
              },
              "centerId": 6,
              "createdAt": "2018-07-24T16:16:11.648Z",
              "date": "2018-9-04",
              "eventType": "Meeting",
              "guestNo": 20,
              "id": 4,
              "isCancelled": null,
              "updatedAt": "2018-07-24T16:16:11.648Z",
              "userId": 5,
            },
            "event3": Object {
              "Center": Object {
                "address": "34, Admiralty way",
                "city": "Lekki",
                "image": "",
                "name": "No Chill",
              },
              "centerId": 9,
              "createdAt": "2018-05-20T16:16:11.648Z",
              "date": "2018-06-09",
              "eventType": "Party",
              "guestNo": 200,
              "id": 9,
              "isCancelled": null,
              "updatedAt": "2018-05-21T16:16:11.648Z",
              "userId": 8,
            },
          },
        ],
        "moreHistory": true,
      }
    }
    deleteEvent={[MockFunction]}
    editEvent={[MockFunction]}
    events={
      Object {
        "event1": Object {
          "Center": Object {
            "address": "23, Iyanla Street",
            "city": "Ikate",
            "image": "",
            "name": "The Sugar Mama",
          },
          "centerId": 3,
          "createdAt": "2018-05-24T16:16:11.648Z",
          "date": "2018-06-04",
          "eventType": "Party",
          "guestNo": 60,
          "id": 3,
          "isCancelled": null,
          "updatedAt": "2018-05-24T16:16:11.648Z",
          "userId": 4,
        },
        "event2": Object {
          "Center": Object {
            "address": "23, Segun Samuel Street",
            "city": "Denrele",
            "image": "",
            "name": "The Hot Abode",
          },
          "centerId": 6,
          "createdAt": "2018-07-24T16:16:11.648Z",
          "date": "2018-9-04",
          "eventType": "Meeting",
          "guestNo": 20,
          "id": 4,
          "isCancelled": null,
          "updatedAt": "2018-07-24T16:16:11.648Z",
          "userId": 5,
        },
        "event3": Object {
          "Center": Object {
            "address": "34, Admiralty way",
            "city": "Lekki",
            "image": "",
            "name": "No Chill",
          },
          "centerId": 9,
          "createdAt": "2018-05-20T16:16:11.648Z",
          "date": "2018-06-09",
          "eventType": "Party",
          "guestNo": 200,
          "id": 9,
          "isCancelled": null,
          "updatedAt": "2018-05-21T16:16:11.648Z",
          "userId": 8,
        },
      }
    }
    getUsersEvents={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
            6,
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": Promise {},
          },
        ],
      }
    }
    user={
      Object {
        "createdAt": "2018-05-25T18:04:41.552Z",
        "email": "agberodeyforhere@gmail.com",
        "firstName": "Agbero",
        "id": 17,
        "isAdmin": false,
        "lastName": "Idumota",
        "loginTime": "2018-04-26T16:15:47.142Z",
        "password": "parking",
        "updatedAt": "2018-05-25T18:04:41.552Z",
        "username": "agberodeyforhere",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3>
          All Your Upcoming Events.
        </h3>,
        <div>
           
          You have no booked events
          <ScrollUp
            duration={250}
            easing="easeOutCubic"
            showUnder={100}
            style={
              Object {
                "bottom": 50,
                "cursor": "pointer",
                "position": "fixed",
                "right": 30,
                "transitionDelay": "0s",
                "transitionDuration": "0.2s",
                "transitionTimingFunction": "linear",
              }
            }
            topPosition={0}
          >
            <button
              className="btn btn-floating btn-rounded waves-effect"
              type="button"
            >
              TOP
            </button>
          </ScrollUp>
          <br />
          <br />
        </div>,
        <Modal
          animation={true}
          autoFocus={true}
          backdrop={true}
          bsClass="modal"
          bsSize="large"
          className="modal-display"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={false}
        >
          <Connect(EditModal)
            event=""
            hideModal={[Function]}
          />
        </Modal>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "All Your Upcoming Events.",
        },
        "ref": null,
        "rendered": "All Your Upcoming Events.",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            " ",
            "You have no booked events",
            false,
            <ScrollUp
              duration={250}
              easing="easeOutCubic"
              showUnder={100}
              style={
                Object {
                  "bottom": 50,
                  "cursor": "pointer",
                  "position": "fixed",
                  "right": 30,
                  "transitionDelay": "0s",
                  "transitionDuration": "0.2s",
                  "transitionTimingFunction": "linear",
                }
              }
              topPosition={0}
            >
              <button
                className="btn btn-floating btn-rounded waves-effect"
                type="button"
              >
                TOP
              </button>
            </ScrollUp>,
            undefined,
            <br />,
            <br />,
          ],
        },
        "ref": null,
        "rendered": Array [
          " ",
          "You have no booked events",
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <button
                className="btn btn-floating btn-rounded waves-effect"
                type="button"
              >
                TOP
              </button>,
              "duration": 250,
              "easing": "easeOutCubic",
              "showUnder": 100,
              "style": Object {
                "bottom": 50,
                "cursor": "pointer",
                "position": "fixed",
                "right": 30,
                "transitionDelay": "0s",
                "transitionDuration": "0.2s",
                "transitionTimingFunction": "linear",
              },
              "topPosition": 0,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "TOP",
                "className": "btn btn-floating btn-rounded waves-effect",
                "type": "button",
              },
              "ref": null,
              "rendered": "TOP",
              "type": "button",
            },
            "type": [Function],
          },
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "animation": true,
          "autoFocus": true,
          "backdrop": true,
          "bsClass": "modal",
          "bsSize": "large",
          "children": <Connect(EditModal)
            event=""
            hideModal={[Function]}
          />,
          "className": "modal-display",
          "dialogComponentClass": [Function],
          "enforceFocus": true,
          "keyboard": true,
          "manager": ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          },
          "onHide": [Function],
          "renderBackdrop": [Function],
          "restoreFocus": true,
          "show": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "event": "",
            "hideModal": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3>
            All Your Upcoming Events.
          </h3>,
          <div>
             
            You have no booked events
            <ScrollUp
              duration={250}
              easing="easeOutCubic"
              showUnder={100}
              style={
                Object {
                  "bottom": 50,
                  "cursor": "pointer",
                  "position": "fixed",
                  "right": 30,
                  "transitionDelay": "0s",
                  "transitionDuration": "0.2s",
                  "transitionTimingFunction": "linear",
                }
              }
              topPosition={0}
            >
              <button
                className="btn btn-floating btn-rounded waves-effect"
                type="button"
              >
                TOP
              </button>
            </ScrollUp>
            <br />
            <br />
          </div>,
          <Modal
            animation={true}
            autoFocus={true}
            backdrop={true}
            bsClass="modal"
            bsSize="large"
            className="modal-display"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
          >
            <Connect(EditModal)
              event=""
              hideModal={[Function]}
            />
          </Modal>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "All Your Upcoming Events.",
          },
          "ref": null,
          "rendered": "All Your Upcoming Events.",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              " ",
              "You have no booked events",
              false,
              <ScrollUp
                duration={250}
                easing="easeOutCubic"
                showUnder={100}
                style={
                  Object {
                    "bottom": 50,
                    "cursor": "pointer",
                    "position": "fixed",
                    "right": 30,
                    "transitionDelay": "0s",
                    "transitionDuration": "0.2s",
                    "transitionTimingFunction": "linear",
                  }
                }
                topPosition={0}
              >
                <button
                  className="btn btn-floating btn-rounded waves-effect"
                  type="button"
                >
                  TOP
                </button>
              </ScrollUp>,
              undefined,
              <br />,
              <br />,
            ],
          },
          "ref": null,
          "rendered": Array [
            " ",
            "You have no booked events",
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <button
                  className="btn btn-floating btn-rounded waves-effect"
                  type="button"
                >
                  TOP
                </button>,
                "duration": 250,
                "easing": "easeOutCubic",
                "showUnder": 100,
                "style": Object {
                  "bottom": 50,
                  "cursor": "pointer",
                  "position": "fixed",
                  "right": 30,
                  "transitionDelay": "0s",
                  "transitionDuration": "0.2s",
                  "transitionTimingFunction": "linear",
                },
                "topPosition": 0,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "TOP",
                  "className": "btn btn-floating btn-rounded waves-effect",
                  "type": "button",
                },
                "ref": null,
                "rendered": "TOP",
                "type": "button",
              },
              "type": [Function],
            },
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "animation": true,
            "autoFocus": true,
            "backdrop": true,
            "bsClass": "modal",
            "bsSize": "large",
            "children": <Connect(EditModal)
              event=""
              hideModal={[Function]}
            />,
            "className": "modal-display",
            "dialogComponentClass": [Function],
            "enforceFocus": true,
            "keyboard": true,
            "manager": ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            },
            "onHide": [Function],
            "renderBackdrop": [Function],
            "restoreFocus": true,
            "show": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "event": "",
              "hideModal": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
