{
    "swagger": "2.0",
    "info": {
      "version": "1.0.0",
      "title": "Events Manager",
      "description": " API documetationn for an event manager"
    },
    "host": "obievents.herokuapp.com/docs",
    "basePath": "/api/v1",
    "schemes": [
      "http",
      "https"
    ],
    "securityDefinitions": {
      "UserToken": {
        "type": "apiKey",
        "in": "header",
        "name": "token"
      }
    },
    "paths": {
      "/users/login": {
        "post": {
          "tags": ["User"],
          "summary": "Authenticates a user",
          "description": "Checks a user in the database",
          "parameters": [{
            "name": "person",
            "in": "body",
            "description": "user to authenticate",
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found"
            },
            "500": {
              "description": "Server Error"
            }
          }
        }
      },
      "/users": {
        "post": {
          "tags": ["User"],
          "summary": "Sign up a user",
          "description": "Registers a user to the database.",
          "parameters": [{
            "name": "person",
            "in": "body",
            "description": "The user being registered.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }],
          "responses": {
            "201": {
              "description": "Created"
            },
            "400": {
              "description": "Bad Request"
            },
            "409": {
              "description": "User already exists"
            },
            "500": {
              "description": "Server Error"
            }
          }
        }
      },
      "/events": {
        "post": {
          "tags": ["Events"],
          "summary": "Creates a new event",
          "description": "Creates a new events and stores it in the database.",
          "security": [{
            "UserToken": []
          }],
          "parameters": [{
            "name": "event",
            "in": "body",
            "description": "The event to create.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }],
          "responses": {
            "201": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "500": {
              "description": "Server Error"
            }
          }
        }
      },
      "/events/{id}": {
        "put": {
          "tags": ["Events"],
          "summary": "Update an event",
          "description": "Update an existing event in the database.",
          "security": [{
            "UserToken": []
          }],
          "parameters": [{
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "The event to update.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          {
            "in": "formData",
              "name": "eventType",
              "type": "string"
          },
          {
            "in": "formData",
              "name": "centerId",
              "type": "integer"
          },
          {
            "in": "formData",
              "name": "date",
              "type": "string"
          },
          {
            "in": "formData",
              "name": "guestNo",
              "type": "integer"
          }
        ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "500": {
              "description": "Server Error"
            }
          }
        },
        "delete": {
          "tags": ["Events"],
          "summary": "Delete an event",
          "description": "Delete an existing event from the database.",
          "security": [{
            "UserToken": []
          }],
          "parameters": [{
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "The event to delete."
          }],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "500": {
              "description": "Server Error"
            }
          }
        }
      },
      "/centers": {
        "post": {
          "tags": ["Centers"],
          "summary": "Creates a center",
          "description": "Creates a new center and stores to the database.",
          "security": [{
            "UserToken": []
          }],
          "parameters": [{
            "name": "center",
            "in": "body",
            "description": "The center to create.",
            "schema": {
              "$ref": "#/definitions/Center"
            }
          }],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "500": {
              "description": "Server Error"
            }
          }
        },
        "get": {
          "tags": ["Centers"],
          "summary": "Gets all center",
          "description": "gets all center and adds to the database.",
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "500": {
              "description": "Server Error"
            }
          }
        }
      },
      "/centers/{id}": {
        "get": {
          "tags": ["Centers"],
          "summary": "gets a single center",
          "description": "gets a center and adds to the database.",
          "parameters": [{
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "The center to retrieve."
          }],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "500": {
              "description": "Server Error"
            }
          }
        },
        "put": {
          "tags": ["Centers"],
          "summary": "Modifies a center",
          "description": "modifies a center and saves it to the database.",
          "security": [{
            "UserToken": []
          }],
          "parameters": [{
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "The center to update.",
            "schema": {
              "$ref": "#/definitions/Center"
            }
          },
          {
            "in": "formData",
              "name": "name",
              "type": "string"
          },
          {
            "in": "formData",
              "name": "address",
              "type": "string"
          },
          {
            "in": "formData",
              "name": "facility",
              "type": "string"
          },
          {
            "in": "formData",
              "name": "capacity",
              "type": "integer"
          },
          {
            "in": "formData",
              "name": "city",
              "type": "string"
          }
        ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Bad Request"
            },
            "500": {
              "description": "Server Error"
            }
          }
        }
      }
    },
    "definitions": {
      "User": {
        "required": [
          "email",
          "username",
          "password",
          "confirmPassword"
        ],
        "properties": {
          "email": {
            "type": "string",
            "uniqueItems": true
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "verifyPassword": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }

        }
      },
      "UserLogin": {
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "uniqueItems": true
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Event": {
        "required": [
          "eventType",
          "guestNo",
          "date",
          "centerId"
        ],
        "properties": {
          "eventType": {
            "type": "string"
          },
          "centerId": {
            "type": "integer"
          },
          "date": {
            "type": "string"
          },
          "guestNo": {
            "type": "integer"
          }
        }
      },
      "Center": {
        "required": [
          "name",
          "address",
          "facility",
          "capacity",
          "city"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "facility": {
            "type": "string"
          },
          "capacity": {
            "type": "integer"
          }
        }
      }
    }
  }